<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1642217_demo3_1.readEXCEL</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>readEXCEL</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var readEXCEL = Class.create();
readEXCEL.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	//Input:Native Excel row format and return:Schema-consistent JSON object
    prepareData: function(row) { 
        var myData = {};
        myData.item_name = row['Item Name'] || '';
        myData.category = row['Category'] || '';
        myData.price = row['Price'] || '0';
        return myData;
    },

    getData: function() {
        try {
            var id = this.getParameter('sysparm_id');
            if (!id) {
                return JSON.stringify({
                    error: "Missing attachment ID"
                });
            }

            var myobjArray = [];
            var parser = new sn_impex.GlideExcelParser(); //server-side API for parsing Excel file data.
            var attachment = new GlideSysAttachment(); //get attachment object.
            var attachmentStream = attachment.getContentStream(id); //Retrieve the binary stream of the Excel file by ID.

            if (!attachmentStream) {
                return JSON.stringify({
                    error: "Attachment not found"
                });
            }

            parser.parse(attachmentStream);
            // Parse the Excel file row by row, skipping invalid rows.
            while (parser.next()) {
                var row = parser.getRow();
				// Check if the row is valid before processing
                if (row) { 
                    // Use the prepareData() method to convert each row into a standard object.
                    myobjArray.push(this.prepareData(row));
                }
            }
            return JSON.stringify(myobjArray);
        } catch (e) {
            return JSON.stringify({
                error: e.message
            });
        }
    },
    type: 'readEXCEL'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-09 12:42:37</sys_created_on>
        <sys_id>3b307599830eea10f980f1d6feaad38f</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>readEXCEL</sys_name>
        <sys_package display_value="Demo3-PDF Generate PDF &amp; Field Update" source="x_1642217_demo3_1">8a3e77bf83316610f980f1d6feaad374</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Demo3-PDF Generate PDF &amp; Field Update">8a3e77bf83316610f980f1d6feaad374</sys_scope>
        <sys_update_name>sys_script_include_3b307599830eea10f980f1d6feaad38f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-12 09:10:57</sys_updated_on>
    </sys_script_include>
</record_update>
